{"version":3,"sources":["utils/Utils.js","App.js","index.js"],"names":["utils","sum","arr","reduce","acc","curr","range","min","max","Array","from","length","_","i","random","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push","colors","available","used","wrong","candidate","StarsDisplay","props","count","map","starId","key","className","PlayNumber","style","backgroundColor","status","onClick","number","PlayAgain","color","gameStatus","Game","useState","stars","setStars","availableNums","setAvailableNums","candidateNums","setCandidateNums","secondsLeft","setSecondsLeft","useEffect","timerId","setTimeout","clearTimeout","candidatesAreWrong","numberStatus","includes","onNumberClick","currentStatus","newCandidateNums","filter","cn","newAvailableNums","n","startNewGame","StartMatch","gameId","setGameId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b6cca704.chunk.js","sourcesContent":["// Math science\r\nconst utils = {\r\n    // Sum an array\r\n    sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\r\n\r\n    // create an array of numbers between min and max (edges included)\r\n    range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\r\n\r\n    // pick a random number between min and max (edges included)\r\n    random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n\r\n    // Given an array of numbers and a max...\r\n    // Pick a random sum (< max) from the set of all available sums in arr\r\n    randomSumIn: (arr, max) => {\r\n        const sets = [[]];\r\n        const sums = [];\r\n        for (let i = 0; i < arr.length; i++) {\r\n            for (let j = 0, len = sets.length; j < len; j++) {\r\n                const candidateSet = sets[j].concat(arr[i]);\r\n                const candidateSum = utils.sum(candidateSet);\r\n                if (candidateSum <= max) {\r\n                    sets.push(candidateSet);\r\n                    sums.push(candidateSum);\r\n                }\r\n            }\r\n        }\r\n        return sums[utils.random(0, sums.length - 1)];\r\n    },\r\n};\r\n\r\nexport default utils;","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport utils from \"./utils/Utils\";\r\n\r\n// Color Theme\r\nconst colors = {\r\n    available: \"lightgray\",\r\n    used: \"lightgreen\",\r\n    wrong: \"lightcoral\",\r\n    candidate: \"deepskyblue\",\r\n};\r\n\r\nconst StarsDisplay = (props) => (\r\n    <>\r\n        {utils.range(1, props.count).map((starId) => (\r\n            <div key={starId} className=\"star\" />\r\n        ))}\r\n    </>\r\n);\r\n\r\nconst PlayNumber = (props) => (\r\n    <button\r\n        className=\"number\"\r\n        style={{ backgroundColor: colors[props.status] }}\r\n        onClick={() => props.onClick(props.number, props.status)}\r\n    >\r\n        {props.number}\r\n    </button>\r\n);\r\n\r\nconst PlayAgain = (props) => (\r\n    <div className=\"game-done\">\r\n        <div\r\n            className=\"message\"\r\n            style={{ color: props.gameStatus === \"lost\" ? \"red\" : \"green\" }}\r\n        >\r\n            {props.gameStatus === \"lost\" ? \"Game Over\" : \"Nice\"}\r\n        </div>\r\n        <button onClick={props.onClick}>Play Again</button>\r\n    </div>\r\n);\r\n\r\nconst Game = (props) => {\r\n    const [stars, setStars] = useState(utils.random(1, 9));\r\n    const [availableNums, setAvailableNums] = useState(utils.range(1, 9));\r\n    const [candidateNums, setCandidateNums] = useState([]);\r\n    const [secondsLeft, setSecondsLeft] = useState(10);\r\n\r\n    useEffect(() => {\r\n        if (secondsLeft > 0 && availableNums.length > 0) {\r\n            const timerId = setTimeout(() => {\r\n                setSecondsLeft(secondsLeft - 1);\r\n            }, 1000);\r\n\r\n            return () => clearTimeout(timerId);\r\n        }\r\n    });\r\n\r\n    const candidatesAreWrong = utils.sum(candidateNums) > stars;\r\n\r\n    const gameIsWon = availableNums.length === 0;\r\n    const gameIsLost = secondsLeft === 0;\r\n\r\n    const gameStatus = gameIsWon ? \"won\" : gameIsLost ? \"lost\" : \"active\";\r\n\r\n    /*\r\n    This solution removed -> to avoid unexpected side effects\r\n    const resetGame = () => {\r\n        setStars(utils.random(1, 9));\r\n        setAvailableNums(utils.range(1, 9));\r\n        setCandidateNums([]);\r\n        setSecondsLeft(10);\r\n    };\r\n    */\r\n\r\n    const numberStatus = (number) => {\r\n        if (!availableNums.includes(number)) {\r\n            return \"used\";\r\n        }\r\n        if (candidateNums.includes(number)) {\r\n            return candidatesAreWrong ? \"wrong\" : \"candidate\";\r\n        }\r\n        return \"available\";\r\n    };\r\n\r\n    const onNumberClick = (number, currentStatus) => {\r\n        if (gameStatus !== \"active\" || currentStatus === \"used\") {\r\n            return;\r\n        }\r\n\r\n        const newCandidateNums =\r\n            currentStatus === \"available\"\r\n                ? candidateNums.concat(number)\r\n                : candidateNums.filter((cn) => cn !== number);\r\n\r\n        if (utils.sum(newCandidateNums) !== stars) {\r\n            setCandidateNums(newCandidateNums);\r\n        } else {\r\n            const newAvailableNums = availableNums.filter(\r\n                (n) => !newCandidateNums.includes(n)\r\n            );\r\n            setStars(utils.randomSumIn(newAvailableNums, 9));\r\n            setAvailableNums(newAvailableNums);\r\n            setCandidateNums([]);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            <div className=\"help\">\r\n                Pick 1 or more numbers that sum to the number of stars\r\n            </div>\r\n            <div className=\"body\">\r\n                <div className=\"left\">\r\n                    {gameStatus !== \"active\" ? (\r\n                        <PlayAgain\r\n                            onClick={props.startNewGame}\r\n                            gameStatus={gameStatus}\r\n                        />\r\n                    ) : (\r\n                        <StarsDisplay count={stars} />\r\n                    )}\r\n                </div>\r\n                <div className=\"right\">\r\n                    {utils.range(1, 9).map((number) => (\r\n                        <PlayNumber\r\n                            key={number}\r\n                            status={numberStatus(number)}\r\n                            number={number}\r\n                            onClick={onNumberClick}\r\n                        />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n            <div className=\"timer\">Time Remaining: {secondsLeft}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst StartMatch = () => {\r\n    const [gameId, setGameId] = useState(1);\r\n\r\n    return <Game key={gameId} startNewGame={() => setGameId(gameId + 1)} />;\r\n};\r\n\r\nexport default StartMatch;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n// import * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}